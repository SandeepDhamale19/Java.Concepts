Lambda Expressions (also referred to as Closures):

1) Introduced with JDK8
2) Acted as a catalyst in the introduction of two new Java features - i) Default Method and ii) Method Reference
3) A lambda expression is an anonymous, unnamed method which does not get executed on its own. It is used to implement
     a method defined by a functional interface. Some common Functional Interfaces in Java are Comparator,
	 Runnable,Comparable,ActionListener etc.
4) A functional interface (also known as SAM = Single Abstract Method) is an interface that contains one and only one abstract
    method which specifies the intended purpose of the interface. e..g "Runnable" functional interface only has the "run" method
    that represents a single action. It also defines the target type of a lambda expression.e.g
    
    public interface MyNumber{
    	double getValue();
    }
    
5) A lambda expression can be used only in a context in which its target type is specified.
6) A lambda expression consists of 2 parts - i) left part specifies any parameters required (if no parameter are needed, an empty
    parameter list is used), ii) right side specifies the lambda body which has the actions of the lambda expression.
7) The "->" operator can be verbalized as "becomes" or "goes to"
8) Two types of lambda bodies are there - i) consisting of a single expression ii) consisting of a block of code.
9) A lambda expression is not executed on its own, rather it forms the implementation of the abstract method defined by the
    functional interface that specifies its target type. Hence, a lambda expression can be specified only in a context in which a
    target type is defined. 
10) The contexts are: it is assigned to a functional interface reference, during variable initialization, return statements and
       method arguments.
11) When a lambda expression occurs in a target type context, an instance of a class is automatically created that implements
       the functional interface, with the lambda expression defining the behavior of the abstract method declared by the
       functional interface. When that method is called through the target, the lambda expression is executed. Thus, the lambda
       expression gives us a way to transform a code segment into an object.  
12) The type and number of the lambda expression's parameters must be compatible with the method's parameters, the
        return types must be compatible and any exceptions thrown by the lambda expression must be acceptable to the method.
        
  

